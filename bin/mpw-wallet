# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

require 'optparse'
require 'mpw/config'
require 'mpw/cli'

# --------------------------------------------------------- #
# Options
# --------------------------------------------------------- #

options          = {}
options[:delete] = false

OptionParser.new do |opts|
  opts.banner = "#{I18n.t('option.usage')}: mpw wallet [options]"

  opts.on('-a', '--add-gpg-key NAME', I18n.t('option.add_gpg_key')) do |gpg_key|
    options[:gpg_key] = gpg_key
  end

  opts.on('-c', '--config PATH', I18n.t('option.config')) do |config|
    options[:config] = config
  end

  opts.on('-d', '--delete-gpg-key NAME', I18n.t('option.delete_gpg_key')) do |gpg_key|
    options[:gpg_key] = gpg_key
    options[:delete]  = true
  end

  opts.on('-h', '--help', I18n.t('option.help')) do
    puts opts
    exit 0
  end

  opts.on('-l', '--list', I18n.t('option.list')) do
    options[:list] = true
  end

  opts.on('-L', '--list-keys', I18n.t('option.list_keys')) do
    options[:list_keys] = true
  end

  opts.on('-w', '--wallet NAME', I18n.t('option.wallet')) do |wallet|
    options[:wallet] = wallet
  end
end.parse!

config = MPW::Config.new(options[:config])
cli    = MPW::Cli.new(config)

cli.load_config

if options.key?(:list_keys) || options.key?(:gpg_key)
  cli.get_wallet(options[:wallet])
  cli.decrypt

  if options.key?(:list_keys)
    cli.list_keys
  elsif options.key?(:gpg_key)
    options[:delete] ? cli.delete_key(options[:gpg_key]) : cli.add_key(options[:gpg_key])
  end
else
  cli.list_wallet
end
