#!/usr/bin/env ruby
#
# Copyright:: 2013, Adrien Waksberg
#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

$LOAD_PATH << File.expand_path('../../lib', __FILE__)

require 'locale'
require 'set'
require 'i18n'
require 'colorize'

# --------------------------------------------------------- #
# Set local
# --------------------------------------------------------- #

lang = Locale::Tag.parse(ENV['LANG']).to_simple.to_s[0..1]

if defined?(I18n.enforce_available_locales)
  I18n.enforce_available_locales = true
end

I18n::Backend::Simple.send(:include, I18n::Backend::Fallbacks)
I18n.load_path      = Dir["#{File.expand_path('../../i18n', __FILE__)}/*.yml"]
I18n.default_locale = :en
I18n.locale         = lang.to_sym

# --------------------------------------------------------- #
# Options
# --------------------------------------------------------- #

bin_dir = File.dirname(__FILE__)
command = "#{bin_dir}/mpw-#{ARGV[0]}"

if Dir.glob("#{bin_dir}/mpw-*").include?(command.to_s)
  begin
    Kernel.load(command)
  rescue OptionParser::ParseError => e
    puts "#{I18n.t('display.error')}: #{e}".red
  end
else
  puts "#{I18n.t('option.usage')}: mpw COMMAND [options]\n\n"
  puts 'Commands:'
  puts "  add       #{I18n.t('command.add')}"
  puts "  config    #{I18n.t('command.config')}"
  puts "  copy      #{I18n.t('command.copy')}"
  puts "  delete    #{I18n.t('command.delete')}"
  puts "  export    #{I18n.t('command.export')}"
  puts "  genpwd    #{I18n.t('command.genpwd')}"
  puts "  import    #{I18n.t('command.import')}"
  puts "  list      #{I18n.t('command.list')}"
  puts "  update    #{I18n.t('command.update')}"
  puts "  wallet    #{I18n.t('command.wallet')}"

  exit 3
end
