#
# Copyright:: 2013, Adrien Waksberg
#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

require 'optparse'
require 'mpw/config'
require 'mpw/cli'

# --------------------------------------------------------- #
# Options
# --------------------------------------------------------- #

options = {}
values  = {}

OptionParser.new do |opts|
  opts.banner = "#{I18n.t('option.usage')}: mpw config [options]"

  opts.on('-c', '--config PATH', I18n.t('option.config')) do |config|
    options[:config] = config
  end

  opts.on('-d', '--default-wallet NAME', I18n.t('option.default_wallet')) do |default_wallet|
    values[:default_wallet] = default_wallet
  end

  opts.on('-g', '--gpg-exe PATH', I18n.t('option.gpg_exe')) do |gpg_exe|
    values[:gpg_exe] = gpg_exe
  end

  opts.on('-h', '--help', I18n.t('option.help')) do
    puts opts
    exit 0
  end

  opts.on('-i', '--init GPG_KEY', I18n.t('option.init')) do |gpg_key|
    options[:init]   = true
    values[:gpg_key] = gpg_key
  end

  opts.on('-k', '--key GPG_KEY', I18n.t('option.gpg_key')) do |gpg_key|
    values[:gpg_key] = gpg_key
  end

  opts.on('-L', '--lang LANG', I18n.t('option.lang')) do |lang|
    values[:lang] = lang
  end

  opts.on('-P', '--enable-pinmode', I18n.t('option.pinmode')) do
    values[:pinmode] = true
  end

  opts.on('-p', '--disable-pinmode', I18n.t('option.disable_pinmode')) do
    values[:pinmode] = false
  end

  opts.on('-w', '--wallet-dir PATH', I18n.t('option.wallet_dir')) do |wallet_dir|
    values[:wallet_dir] = wallet_dir
  end

  opts.on('-l', '--length NUMBER', I18n.t('option.length')) do |length|
    values[:pwd_length] = length.to_i
  end

  opts.on('-n', '--numeric', I18n.t('option.numeric')) do
    values[:pwd_numeric] = true
  end

  opts.on('-N', '--disable-numeric', I18n.t('option.disable_numeric')) do
    values[:pwd_numeric] = false
  end

  opts.on('-s', '--special-chars', I18n.t('option.special_chars')) do
    values[:pwd_special] = true
  end

  opts.on('-S', '--disable-special-chars', I18n.t('option.special_chars')) do
    values[:pwd_special] = false
  end

  opts.on('-a', '--alpha', I18n.t('option.alpha')) do
    values[:pwd_alpha] = true
  end

  opts.on('-A', '--disable-alpha', I18n.t('option.disable_alpha')) do
    values[:pwd_alpha] = false
  end
end.parse!

config = MPW::Config.new(options[:config])
cli    = MPW::Cli.new(config)

if options.key?(:init)
  cli.setup(values)
  cli.load_config
  cli.get_wallet
  cli.setup_gpg_key(values[:gpg_key])
else
  cli.load_config
  if values.empty?
    cli.list_config
  else
    cli.set_config(values)
  end
end
